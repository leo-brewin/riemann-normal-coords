import cdblib
checkpoint_file = 'tests/semantic/output/dGamma.json'
cdblib.create (checkpoint_file)
checkpoint = []

{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w#}::Indices(position=independent).

\nabla{#}::Derivative.
\partial{#}::PartialDerivative.

g_{a b}::Metric.
g^{a b}::InverseMetric.
g_{a}^{b}::KroneckerDelta.
g^{a}_{b}::KroneckerDelta.

R_{a b c d}::RiemannTensor.
R^{a}_{b c d}::RiemannTensor.
R_{a b c}^{d}::RiemannTensor.

\Gamma^{a}_{b c}::TableauSymmetry(shape={2}, indices={1,2}).

g_{a b}::Depends(\partial{#}).
R_{a b c d}::Depends(\partial{#}).
R^{a}_{b c d}::Depends(\partial{#}).
\Gamma^{a}_{b c}::Depends(\partial{#}).

# symmetrized partial derivatives of \Gamma

dGamma01:= (1/3) A^{b} A^{c} ( R^{a}_{b c d} - \Gamma^{a}_{c e}\Gamma^{e}_{b d} ).

dGamma02:= (6/4) A^{a}\partial_{a}{ @(dGamma01) }.
distribute   (dGamma02)
product_rule (dGamma02)
unwrap       (dGamma02)
distribute   (dGamma02)

dGamma03:= (12/10) A^{a}\partial_{a}{ @(dGamma02) }.
distribute   (dGamma03)
product_rule (dGamma03)
unwrap       (dGamma03)
distribute   (dGamma03)

dGamma04:= (20/18) A^{a}\partial_{a}{ @(dGamma03) }.
distribute   (dGamma04)
product_rule (dGamma04)
unwrap       (dGamma04)
distribute   (dGamma04)

dGamma05:= (30/28) A^{a}\partial_{a}{ @(dGamma04) }.
distribute   (dGamma05)
product_rule (dGamma05)
unwrap       (dGamma05)
distribute   (dGamma05)


def impose_rnc (obj):
    # hide the derivatives of Gamma
    substitute (obj,$\partial_{d}{\Gamma^{a}_{b c}} -> zzz_{d}^{a}_{b c}$,repeat=True)
    substitute (obj,$\partial_{d e}{\Gamma^{a}_{b c}} -> zzz_{d e}^{a}_{b c}$,repeat=True)
    substitute (obj,$\partial_{d e f}{\Gamma^{a}_{b c}} -> zzz_{d e f}^{a}_{b c}$,repeat=True)
    substitute (obj,$\partial_{d e f g}{\Gamma^{a}_{b c}} -> zzz_{d e f g}^{a}_{b c}$,repeat=True)
    substitute (obj,$\partial_{d e f g h}{\Gamma^{a}_{b c}} -> zzz_{d e f g h}^{a}_{b c}$,repeat=True)
    # set Gamma to zero
    substitute (obj,$\Gamma^{a}_{b c} -> 0$,repeat=True)
    # recover the derivatives Gamma
    substitute (obj,$zzz_{d}^{a}_{b c} -> \partial_{d}{\Gamma^{a}_{b c}}$,repeat=True)
    substitute (obj,$zzz_{d e}^{a}_{b c} -> \partial_{d e}{\Gamma^{a}_{b c}}$,repeat=True)
    substitute (obj,$zzz_{d e f}^{a}_{b c} -> \partial_{d e f}{\Gamma^{a}_{b c}}$,repeat=True)
    substitute (obj,$zzz_{d e f g}^{a}_{b c} -> \partial_{d e f g}{\Gamma^{a}_{b c}}$,repeat=True)
    substitute (obj,$zzz_{d e f g h}^{a}_{b c} -> \partial_{d e f g h}{\Gamma^{a}_{b c}}$,repeat=True)
    return obj

# switch to RNC

dGamma01 = impose_rnc (dGamma01)
dGamma02 = impose_rnc (dGamma02)
dGamma03 = impose_rnc (dGamma03)
dGamma04 = impose_rnc (dGamma04)
dGamma05 = impose_rnc (dGamma05)


# use lower equations to eliminate partial derivs of Gamma from rhs

# this produces experssions for the partial derivs of the Gamma's in terms of the Rabcd and its partial derivs

substitute (dGamma03,$A^{c}A^{b}\partial_{c}{\Gamma^{a}_{b d}} -> @(dGamma01)$,repeat=True)
substitute (dGamma03,$A^{c}A^{b}\partial_{c}{\Gamma^{a}_{d b}} -> @(dGamma01)$,repeat=True)
distribute (dGamma03)

substitute (dGamma04,$A^{c}A^{b}A^{e}\partial_{c e}{\Gamma^{a}_{d b}} -> @(dGamma02)$,repeat=True)
substitute (dGamma04,$A^{c}A^{b}A^{e}\partial_{c e}{\Gamma^{a}_{b d}} -> @(dGamma02)$,repeat=True)
substitute (dGamma04,$A^{c}A^{b}\partial_{c}{\Gamma^{a}_{b d}} -> @(dGamma01)$,repeat=True)
substitute (dGamma04,$A^{c}A^{b}\partial_{c}{\Gamma^{a}_{d b}} -> @(dGamma01)$,repeat=True)
distribute (dGamma04)

substitute (dGamma05,$A^{c}A^{b}A^{e}A^{f}\partial_{c e f}{\Gamma^{a}_{d b}} -> @(dGamma03)$,repeat=True)
substitute (dGamma05,$A^{c}A^{b}A^{e}A^{f}\partial_{c e f}{\Gamma^{a}_{b d}} -> @(dGamma03)$,repeat=True)
substitute (dGamma05,$A^{c}A^{b}A^{e}\partial_{c e}{\Gamma^{a}_{d b}} -> @(dGamma02)$,repeat=True)
substitute (dGamma05,$A^{c}A^{b}A^{e}\partial_{c e}{\Gamma^{a}_{b d}} -> @(dGamma02)$,repeat=True)
substitute (dGamma05,$A^{c}A^{b}\partial_{c}{\Gamma^{a}_{b d}} -> @(dGamma01)$,repeat=True)
substitute (dGamma05,$A^{c}A^{b}\partial_{c}{\Gamma^{a}_{d b}} -> @(dGamma01)$,repeat=True)
distribute (dGamma05)


# note:
# canonicalise must not be used here because it may make changes like
#    R^{a}_{b c d} -> - R_{b}^{a}_{c d}
# these changes can not be applied inside a \partial, must defer use
# of canocialise until we have \nabla acting on curvatures

sort_product   (dGamma03)
rename_dummies (dGamma03)
# canonicalise   (dGamma03)

sort_product   (dGamma04)
rename_dummies (dGamma04)
# canonicalise   (dGamma04)

sort_product   (dGamma05)
rename_dummies (dGamma05)
# canonicalise   (dGamma05)


import cdblib

cdblib.create ('dGamma.json')

cdblib.put ('dGamma01',dGamma01,'dGamma.json')
cdblib.put ('dGamma02',dGamma02,'dGamma.json')
cdblib.put ('dGamma03',dGamma03,'dGamma.json')
cdblib.put ('dGamma04',dGamma04,'dGamma.json')
cdblib.put ('dGamma05',dGamma05,'dGamma.json')


# note: keeping numbering as is (out of order) to ensure R appears before \nabla R etc.
def product_sort (obj):
    substitute (obj,$ A^{a}                              -> A001^{a}                 $)
    substitute (obj,$ x^{a}                              -> A002^{a}                 $)
    substitute (obj,$ g^{a b}                            -> A003^{a b}               $)
    substitute (obj,$ \partial_{e f g h}{R^{a}_{b c d}}  -> A008^{a}_{b c d e f g h} $)
    substitute (obj,$ \partial_{e f g}{R^{a}_{b c d}}    -> A007^{a}_{b c d e f g}   $)
    substitute (obj,$ \partial_{e f}{R^{a}_{b c d}}      -> A006^{a}_{b c d e f}     $)
    substitute (obj,$ \partial_{e}{R^{a}_{b c d}}        -> A005^{a}_{b c d e}       $)
    substitute (obj,$ R^{a}_{b c d}                      -> A004^{a}_{b c d}         $)
    sort_product   (obj)
    rename_dummies (obj)
    substitute (obj,$ A001^{a}                  -> A^{a}                             $)
    substitute (obj,$ A002^{a}                  -> x^{a}                             $)
    substitute (obj,$ A003^{a b}                -> g^{a b}                           $)
    substitute (obj,$ A004^{a}_{b c d}          -> R^{a}_{b c d}                     $)
    substitute (obj,$ A005^{a}_{b c d e}        -> \partial_{e}{R^{a}_{b c d}}       $)
    substitute (obj,$ A006^{a}_{b c d e f}      -> \partial_{e f}{R^{a}_{b c d}}     $)
    substitute (obj,$ A007^{a}_{b c d e f g}    -> \partial_{e f g}{R^{a}_{b c d}}   $)
    substitute (obj,$ A008^{a}_{b c d e f g h}  -> \partial_{e f g h}{R^{a}_{b c d}} $)

    return obj

def reformat (obj,scale):
    bah  = Ex(str(scale))
    tmp := @(bah) @(obj).
    distribute     (tmp)
    tmp = product_sort (tmp)
    rename_dummies (tmp)
    factor_out     (tmp,$A^{a?}$)
    return tmp

def get_term (obj,n):

    A^{a}::Weight(label=numA).

    foo := @(obj).
    bah  = Ex("numA = " + str(n))
    distribute  (foo)
    keep_weight (foo, bah)

    return foo

Gterm01 := @(dGamma01).
Gterm02 := @(dGamma02).
Gterm03 := @(dGamma03).
Gterm04 := @(dGamma04).
Gterm05 := @(dGamma05).

scaled1 = reformat (Gterm01,   3)
scaled2 = reformat (Gterm02,   6)
scaled3 = reformat (Gterm03,  15)
scaled4 = reformat (Gterm04,   9)
scaled5 = reformat (Gterm05, 252)


substitute (scaled1,$A^{a}->1$)
substitute (scaled2,$A^{a}->1$)
substitute (scaled3,$A^{a}->1$)
substitute (scaled4,$A^{a}->1$)
substitute (scaled5,$A^{a}->1$)

cdblib.create ('dGamma.export')

# 6th order dGamma, scaled
cdblib.put ('dGamma61scaled',scaled1,'dGamma.export')
cdblib.put ('dGamma62scaled',scaled2,'dGamma.export')
cdblib.put ('dGamma63scaled',scaled3,'dGamma.export')
cdblib.put ('dGamma64scaled',scaled4,'dGamma.export')
cdblib.put ('dGamma65scaled',scaled5,'dGamma.export')

checkpoint.append (scaled1)
checkpoint.append (scaled2)
checkpoint.append (scaled3)
checkpoint.append (scaled4)
checkpoint.append (scaled5)


for i in range( len(checkpoint) ):
   cdblib.put ('check{:03d}'.format(i),checkpoint[i],checkpoint_file)

